[{"/Users/alihashemi/Desktop/codes/react/todo-app/src/index.js":"1","/Users/alihashemi/Desktop/codes/react/todo-app/src/App.js":"2","/Users/alihashemi/Desktop/codes/react/todo-app/src/reportWebVitals.js":"3","/Users/alihashemi/Desktop/codes/react/todo-app/src/Components/Dashboard.jsx":"4","/Users/alihashemi/Desktop/codes/react/todo-app/src/Components/Item.jsx":"5","/Users/alihashemi/Desktop/codes/react/todo-app/src/Components/Highlighted.jsx":"6","/Users/alihashemi/Desktop/codes/react/todo-app/src/Components/Auth/Authenticate.jsx":"7"},{"size":760,"mtime":1695421307579,"results":"8","hashOfConfig":"9"},{"size":369,"mtime":1695558112535,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1694630216344,"results":"11","hashOfConfig":"9"},{"size":15775,"mtime":1695558089808,"results":"12","hashOfConfig":"9"},{"size":8473,"mtime":1695247451987,"results":"13","hashOfConfig":"9"},{"size":538,"mtime":1695381618098,"results":"14","hashOfConfig":"9"},{"size":6642,"mtime":1695552822285,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"kqvfqz",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alihashemi/Desktop/codes/react/todo-app/src/index.js",[],[],[],"/Users/alihashemi/Desktop/codes/react/todo-app/src/App.js",[],[],"/Users/alihashemi/Desktop/codes/react/todo-app/src/reportWebVitals.js",[],[],"/Users/alihashemi/Desktop/codes/react/todo-app/src/Components/Dashboard.jsx",["39","40","41","42","43","44","45"],[],"/Users/alihashemi/Desktop/codes/react/todo-app/src/Components/Item.jsx",["46","47","48","49","50","51","52","53","54","55","56","57","58","59","60"],[],"import React, { useState, useRef } from \"react\";\nimport Overlay from \"react-bootstrap/Overlay\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport Form from \"react-bootstrap/Form\";\nimport Highlighted from \"./Highlighted\";\nfunction Item(props) {\n  const [showToolTip, setShowToolTip] = useState(false);\n  const [showNoteToolTip, setShowNoteToolTip] = useState(false);\n  const [onEditMode, setOnEditMode] = useState(false);\n  const [onEditNoteMode, setOnEditNoteMode] = useState(false);\n  const [todo, setTodo] = useState(props.todo);\n\n  const target = useRef(null);\n  const noteRef = useRef(null);\n  const radioInput = useRef(null);\n\n  const task_time_passed = (task_time) => {\n    var lastVisit = new Date(task_time);\n\n    // var thirtyMinutes = 30 * 60000; // 60000 being the number of milliseconds in a minute\n    var now = new Date();\n    // var thirtyMinutesAgo = new Date(now - lastVisit);\n\n    if (lastVisit < now) return true;\n    else return false;\n  };\n  //for assigning ref in react we should define it with useRef and then insert it in ref attribute of element\n  const editBody = (id, updateValue) => {\n    setTodo({ ...todo, body: updateValue });\n    props.editBody(id, updateValue);\n  };\n  const editNote = (id, updateValue) => {\n    setTodo({ ...todo, note: updateValue });\n    props.editNote(id, updateValue);\n  };\n  const editDate = (id, updateValue) => {\n    setTodo({ ...todo, date: updateValue });\n    props.editDate(id, updateValue);\n  };\n  const editTime = (id, updateValue) => {\n    setTodo({ ...todo, time: updateValue });\n    props.editTime(id, updateValue);\n  };\n  const editPriority = (id, updateValue) => {\n    setTodo({ ...todo, priority: updateValue });\n    props.editPriority(id, updateValue);\n  };\n  const markAsCompleted = (id) => {\n    props.markAsCompleted(id);\n    //we pass the method as props of component in parent element\n    radioInput.current.checked = !todo.completed;\n    // setTodo({  ...todo, completed: !todo.completed });\n  };\n\n  const deleteTask = (id) => {\n    props.deleteTask(id);\n  };\n  return (\n    <div>\n      <div className=\"row\">\n        <div className=\"col-8\" onDoubleClick={() => setOnEditMode(true)}>\n          <div className=\"row\">\n            <div className=\"col-1\">\n              <input\n                ref={radioInput}\n                //assign predefined ref to element so we can use its attribute\n                type=\"radio\"\n                className=\"me-2\"\n                checked={todo.completed}\n                onClick={() => markAsCompleted(todo.id)}\n                onChange={() => {}}\n                // onClick is correct event for radio input\n              />\n            </div>\n\n            <div className=\"col-11\">\n              <div style={{ fontWeight: \"bold\" }}>\n                <span\n                  className={`${\n                    todo.priority == 1\n                      ? \"text-success\"\n                      : todo.priority == 2\n                      ? \"text-warning\"\n                      : todo.priority == 3\n                      ? \"text-danger\"\n                      : \"\"\n                  } me-3`}\n                >\n                  {todo.priority == 1\n                    ? \"!\"\n                    : todo.priority == 2\n                    ? \"!!\"\n                    : todo.priority == 3\n                    ? \"!!!\"\n                    : \"\"}\n                </span>\n                {!onEditMode ? (\n                  <Highlighted text={todo.body} highlight={props.searchWord} />\n                ) : (\n                  <Form.Control\n                    type=\"text\"\n                    name=\"title\"\n                    value={todo.body}\n                    onChange={(event) => editBody(todo.id, event.target.value)}\n                    //   onChange={(event) => setNewItemTitle(event.target.value)}\n                  />\n                )}\n              </div>\n              {todo.time && todo.date ? (\n                <div\n                  className={`${\n                    task_time_passed(todo.date + \" \" + todo.time)\n                      ? \"text-danger\"\n                      : \"text-secondary \"\n                  }`}\n                >\n                  Remind Time: {todo.date} | {todo.time}\n                </div>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </div>\n        </div>\n        <div\n          className=\"col-4 text-end\"\n          onClick={() => {\n            if (onEditMode) {\n              setOnEditMode(false);\n            }\n          }}\n        >\n          {/* Note Button */}\n          {/* <button\n            ref={noteRef}\n            className=\"btn\"\n            onClick={() => setShowNoteToolTip(!showNoteToolTip)}\n          >\n            <i className=\"fa fa-sticky-note text-dark\"></i>\n          </button>\n          <Overlay\n            target={noteRef.current}\n            show={showNoteToolTip}\n            placement=\"left\"\n          >\n            {(props) => (\n              <Tooltip id=\"overlay-example\" {...props}>\n                {!onEditNoteMode ? (\n                  todo.note\n                ) : (\n                  <Form.Control\n                    type=\"text\"\n                    name=\"title\"\n                    value={todo.note}\n                    onChange={(event) => editNote(todo.id, event.target.value)}\n                    //   onChange={(event) => setNewItemTitle(event.target.value)}\n                  />\n                )}\n              </Tooltip>\n            )}\n          </Overlay> */}\n          {/* Note Button End*/}\n\n          {/* Delete Button  */}\n          <button\n            ref={target}\n            className=\"btn\"\n            onClick={() => deleteTask(todo.id)}\n          >\n            <i className=\"fa fa-trash text-danger\"></i>\n          </button>\n          {/* Delete Button End */}\n\n          {/* Details Button  */}\n          <button\n            ref={target}\n            className=\"btn\"\n            onClick={() => setShowToolTip(!showToolTip)}\n          >\n            <i className=\"fa fa-info-circle\"></i>\n          </button>\n          <Overlay target={target.current} show={showToolTip} placement=\"left\">\n            {(props) => (\n              <Tooltip id=\"overlay-example\" {...props}>\n                <Form>\n                  <Form.Group\n                    className=\"mb-3\"\n                    controlId=\"exampleForm.ControlInput1\"\n                  >\n                    <Form.Label>Date</Form.Label>\n                    <Form.Control\n                      type=\"date\"\n                      name=\"date\"\n                      value={todo.date}\n                      onChange={(event) =>\n                        editDate(todo.id, event.target.value)\n                      }\n                    />\n                  </Form.Group>\n                  <Form.Group\n                    className=\"mb-3\"\n                    controlId=\"exampleForm.ControlInput1\"\n                  >\n                    <Form.Label>Time</Form.Label>\n                    <Form.Control\n                      type=\"time\"\n                      step=\"3600\"\n                      name=\"time\"\n                      value={todo.time}\n                      onChange={(event) =>\n                        editTime(todo.id, event.target.value)\n                      }\n                    />\n                  </Form.Group>\n                  <Form.Group\n                    className=\"mb-3\"\n                    controlId=\"exampleForm.ControlInput1\"\n                  >\n                    <Form.Label>Priority</Form.Label>\n                    <Form.Select\n                      type=\"time\"\n                      step=\"3600\"\n                      name=\"time\"\n                      value={todo.time}\n                      onChange={(event) =>\n                        editPriority(todo.id, event.target.value)\n                      }\n                    >\n                      <option value=\"1\" selected={todo.priority == 1}>\n                        Low\n                      </option>\n                      <option value=\"2\" selected={todo.priority == 2}>\n                        Medium\n                      </option>\n                      <option value=\"3\" selected={todo.priority == 3}>\n                        High\n                      </option>\n                    </Form.Select>\n                  </Form.Group>\n                </Form>\n              </Tooltip>\n            )}\n          </Overlay>\n          {/* Details Button End */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Item;\n","/Users/alihashemi/Desktop/codes/react/todo-app/src/Components/Highlighted.jsx",[],[],"/Users/alihashemi/Desktop/codes/react/todo-app/src/Components/Auth/Authenticate.jsx",[],[],{"ruleId":"61","severity":1,"message":"62","line":66,"column":7,"nodeType":"63","endLine":66,"endColumn":9,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":122,"column":11,"nodeType":"67","messageId":"68","endLine":122,"endColumn":23},{"ruleId":"69","severity":1,"message":"70","line":124,"column":15,"nodeType":"71","messageId":"72","endLine":124,"endColumn":17},{"ruleId":"73","severity":1,"message":"74","line":179,"column":29,"nodeType":"75","messageId":"76","endLine":179,"endColumn":31},{"ruleId":"73","severity":1,"message":"77","line":434,"column":34,"nodeType":"75","messageId":"76","endLine":434,"endColumn":36},{"ruleId":"69","severity":1,"message":"70","line":460,"column":32,"nodeType":"71","messageId":"72","endLine":460,"endColumn":34},{"ruleId":"69","severity":1,"message":"70","line":491,"column":39,"nodeType":"71","messageId":"72","endLine":491,"endColumn":41},{"ruleId":"65","severity":1,"message":"78","line":8,"column":10,"nodeType":"67","messageId":"68","endLine":8,"endColumn":25},{"ruleId":"65","severity":1,"message":"79","line":8,"column":27,"nodeType":"67","messageId":"68","endLine":8,"endColumn":45},{"ruleId":"65","severity":1,"message":"80","line":10,"column":10,"nodeType":"67","messageId":"68","endLine":10,"endColumn":24},{"ruleId":"65","severity":1,"message":"81","line":10,"column":26,"nodeType":"67","messageId":"68","endLine":10,"endColumn":43},{"ruleId":"65","severity":1,"message":"82","line":14,"column":9,"nodeType":"67","messageId":"68","endLine":14,"endColumn":16},{"ruleId":"65","severity":1,"message":"83","line":32,"column":9,"nodeType":"67","messageId":"68","endLine":32,"endColumn":17},{"ruleId":"73","severity":1,"message":"74","line":80,"column":35,"nodeType":"75","messageId":"76","endLine":80,"endColumn":37},{"ruleId":"73","severity":1,"message":"74","line":82,"column":39,"nodeType":"75","messageId":"76","endLine":82,"endColumn":41},{"ruleId":"73","severity":1,"message":"74","line":84,"column":39,"nodeType":"75","messageId":"76","endLine":84,"endColumn":41},{"ruleId":"73","severity":1,"message":"74","line":89,"column":34,"nodeType":"75","messageId":"76","endLine":89,"endColumn":36},{"ruleId":"73","severity":1,"message":"74","line":91,"column":37,"nodeType":"75","messageId":"76","endLine":91,"endColumn":39},{"ruleId":"73","severity":1,"message":"74","line":93,"column":37,"nodeType":"75","messageId":"76","endLine":93,"endColumn":39},{"ruleId":"73","severity":1,"message":"74","line":229,"column":65,"nodeType":"75","messageId":"76","endLine":229,"endColumn":67},{"ruleId":"73","severity":1,"message":"74","line":232,"column":65,"nodeType":"75","messageId":"76","endLine":232,"endColumn":67},{"ruleId":"73","severity":1,"message":"74","line":235,"column":65,"nodeType":"75","messageId":"76","endLine":235,"endColumn":67},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'todoList' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["84"],"no-unused-vars","'findTodoById' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'showNoteToolTip' is assigned a value but never used.","'setShowNoteToolTip' is assigned a value but never used.","'onEditNoteMode' is assigned a value but never used.","'setOnEditNoteMode' is assigned a value but never used.","'noteRef' is assigned a value but never used.","'editNote' is assigned a value but never used.",{"desc":"85","fix":"86"},"Update the dependencies array to be: [todoList, user]",{"range":"87","text":"88"},[2135,2137],"[todoList, user]"]